openapi: 3.0.0
info:
  title: Express API with Swagger
  version: 1.0.0
  description: This is a simple CRUD API application made with Express and documented with Swagger
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
servers:
  - url: http://localhost:3001/api/
    description: Development server
tags:
  - name: auth
    description: User Auth operations
    externalDocs:
      description: User Documentation 
      url: "http://swagger.io"
  - name: user
    description: User operations
    externalDocs:
      description: User Documentation 
      url: "http://swagger.io"  
  - name: recipe search
    description: Recipe operations
    externalDocs:
      description: Recipe Documentation 
      url: "http://swagger.io"      
  - name : categories
    description: Categories operations
    externalDocs:
      description: Categories Documentation 
      url: "http://swagger.io"  
  - name : posts
    description: Posts operations
    externalDocs:
      description: Posts Documentation 
      url: "http://swagger.io"       
  - name : comments
    description: Comments operations
    externalDocs:
      description: Comments Documentation 
      url: "http://swagger.io"     
paths:
  /auth/register:
    post:
      tags:
        - "auth"
      summary: User Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /auth/login:
    post:
      tags:
        - "auth"
      summary: Log in as an existing user
      description: Logs in an existing user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /auth/refresh-token:
    post:
      tags:
        - "auth"
      summary: Refresh token
      description: Refreshes the user's token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token obtained during login
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Token successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /auth/logout:
    post:
      tags:
        - "auth"
      summary: Logout user
      description: Logs out the currently authenticated user and removes the JWT and refresh token cookies.
      responses:
        '200':
          description: Logged out successfully
        '500':
          description: Internal server error
      security:
        - JWTAuth: []
  /auth/reset-password:
    post:
      tags:
        - "auth"
      summary: Reset password
      description: Reset a user's password
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                token:
                  type: string
                newPassword:
                  type: string
              required:
                - userId
                - token
                - newPassword
      responses:
        '200':
          description: Password reset successfully
        '500':
          description: Internal Server Error
  /auth/request-password-reset:
    post:
      tags:
        - "auth"
      summary: Request password reset
      description: Request a password reset email
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error        
  /users/getUserById:
    get:
      tags:
        - "user"
      summary: Get user by ID
      description: Get user by ID
      parameters:
        - name: userId
          in: query
          description: ID of the user to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error  
  /users/findallusers:
    get:
      tags:
        - "user"
      summary: Get all users
      description: Get all users
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /users/findbyusername/{username}:
    get:
      tags:
        - "user"
      summary: Get user by username
      description: Get user by username
      security:
        - JWTAuth: []
      parameters:
        - name: username
          in: path
          description: The username that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /users/change-password:
    post:
      tags:
        - "user"
      summary: Change user password
      description: Change user password
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                oldPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - id
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/makeAdmin:
    put:
      tags:
        - "user"
      summary: Make user an admin
      description: Make user an admin
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: User is now an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/withdrawAdmin:
    put:
      tags:
        - "user"
      summary: Withdraw admin rights from a user
      description: Withdraw admin rights from a user
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: Admin rights withdrawn successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Admin rights withdrawn successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /users/banUser:
    put:
      tags:
        - "user"
      summary: Ban a user
      description: Ban a user
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: User banned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User banned successfully"
                  userId:
                    type: string
                    example: "userId"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /users/unbanUser:
    put:
      tags:
        - "user"
      summary: Unban a user
      description: Unban a user
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: User unbanned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User unbanned successfully"
                  userId:
                    type: string
                    example: "userId"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: Internal Server Error    
  /users/update-details:
    put:
      tags:
        - "user"
      summary: Update user details
      description: Update user details
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the user to be updated.
                newEmail:
                  type: string
                  description: The new email to be assigned to the user.
                  format: email
                newUsername:
                  type: string
                  description: The new username to be assigned to the user.
              required:
                - id
      responses:
        '200':
          description: User details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  /users/deleteUser:
    delete:
      tags:
        - "user"
      summary: Delete user by ID
      description: Delete user by ID
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the user to be deleted.
                  pattern: '^[0-9a-fA-F]{24}$'
              required:
                - id
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /categories/create: 
    post:
      tags:
        - "categories"
      summary: "Create a new category"
      description: "Create a new category"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCategory'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error            
  /categories/getAll:
    get:
      tags:
        - "categories"
      summary: Get all categories
      description: Get all categories
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /categories/delete:
    delete:
      tags:
        - "categories"
      summary: "Delete category by ID"
      description: "Delete category by ID"
      security:
        - JWTAuth: []
      parameters:
        - name: categoryId
          in: query
          description: ID of the category to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        '400':
          description: Bad Request
  /posts/create:
    post:
      tags:
        - "posts"
      summary: Create a new post
      description: Create a new post
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /posts/get:
    get:
      tags:
        - "posts"
      summary: Get a post by ID
      description: Get a post by ID
      parameters:
        - name: postId
          in: query
          description: ID of the post to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /posts/getAll:
    get:
      tags:
        - "posts"
      summary: Get all posts
      description: Get all posts
      responses:
        '200':
          description: A list of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /posts/getAllByCategoryRecent:
    get:
      tags:
        - "posts"
      summary: Get all posts by category sorted by recent
      description: Get all posts by category sorted by recent
      parameters:
        - name: catId
          in: query
          description: ID of the category to get posts from
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /posts/search:
    get:
      tags:
        - "posts"
      summary: Search for a post
      description: Search for a post
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
          description: Term to search for
        - in: query
          name: cId
          schema:
            type: string
          required: true
          description: Category ID
      responses:
        '200':
          description: A list of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '404':
          description: Not Found  
        '500':
          description: Internal Server Error
  /posts/most-commented:
    get:
      tags:
        - "posts"
      summary: Get most commented posts
      description: Retrieve the top 35 posts with the most comments
      responses:
        '200':
          description: Most commented posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '500':  
          description: Internal Server Error              
  /posts/delete:
    delete:
      tags:
        - "posts"
      summary: Delete a post by ID
      description: Delete a post by ID
      security:
        - JWTAuth: []
      parameters:
        - name: postId
          in: query
          description: ID of the post to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /comments/create:
    post:
      tags:
        - "comments"
      summary: Create a new comment
      description: Create a new comment
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                authorId:
                  type: string
                content:
                  type: string
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /comments/getAll:
    get:
      tags:
        - "comments"
      summary: Get all comments
      description: Get all comments
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of all comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /comments/getAllCommsByPostRecent:
    get:
      tags:
        - "comments"
      summary: Get all comments by post sorted by recent
      description: Get all comments by post sorted by recent
      parameters:
        - name: postId
          in: query
          description: ID of the post to get comments from
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of all comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
  /comments/delete:
    delete:
      tags:
        - "comments"
      summary: Delete a comment by ID
      description: Delete a comment by ID
      security:
        - JWTAuth: []
      parameters:
        - name: commentId
          in: query
          description: ID of the comment to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error  
  /recipes/search:
    get:
      tags:
        - recipe search
      summary: Search for a Recipe
      description: >-
        This endpoint returns a list of recipes matching the provided criteria.
        Get started by placing your search query in the "q" parameter, fill in
        your 3scale credentials, and press the "Try it out!" button at the
        bottom. Additionaly, refine your search by using the optional parameters
        to specify what you are looking for.
         
         <b>Note:</b>
         When mentioned, 'floating point values' refers to values such as '50.0', '50.', '0.5', and '.5'. 
         When speaking of ranges, the API accepts values such as 1.0+, 1.0-50.0, or 50.0, for floating point ranges.
         
         The parameters with <b>(required)</b> in their value box are the required parameters and must be defined as part of a request, all others can be left blank if you do not wish to define them.
         
         <b>Access Point:</b> https://api.edamam.com/api/recipes/v2
      parameters:
        - name: type
          in: query
          description: Type of recipes to search for.
          required: true
          schema:
            type: string
            enum:
              - public
              - user
              - any
        - name: beta
          in: query
          description: Allow beta features in the request and response
          schema:
            type: boolean
        - name: q
          in: query
          description: >-
            Query text, for example "chicken". <br> <b>REQUIRED</b> if no other
            parameter is specified. <b>NOT REQUIRED</b> if any other parameter
            (other than application credentials) is specified.
          schema:
            type: string
        - name: Edamam-Account-User
          in: header
          description: >-
            ID of the account user. Should be used *only* if the account is
            configured for active user tracking.
          schema:
            type: string
        - name: ingr
          in: query
          description: >-
            Filter by number of ingredients (MIN+, MIN-MAX, MAX), where MIN and
            MAX are integer numbers. Example: ingr=5-8
          schema:
            pattern: (?:[+-]?\d+)|(?:(?:[+-]?\d+)-(?:[+-]?\d+))|(?:(?:[+-]?\d+)[+-])
            type: string
        - name: diet
          in: query
          description: >-
            Diet label. You can select multiple labels by holding shift and
            left-clicking all the labels needed.
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - balanced
                - high-fiber
                - high-protein
                - low-carb
                - low-fat
                - low-sodium
        - name: health
          in: query
          description: >-
            Health label. You can select multiple labels by holding shift and
            left-clicking all the labels needed.
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - alcohol-cocktail
                - alcohol-free
                - celery-free
                - crustacean-free
                - dairy-free
                - DASH
                - egg-free
                - fish-free
                - fodmap-free
                - gluten-free
                - immuno-supportive
                - keto-friendly
                - kidney-friendly
                - kosher
                - low-fat-abs
                - low-potassium
                - low-sugar
                - lupine-free
                - Mediterranean
                - mollusk-free
                - mustard-free
                - no-oil-added
                - paleo
                - peanut-free
                - pescatarian
                - pork-free
                - red-meat-free
                - sesame-free
                - shellfish-free
                - soy-free
                - sugar-conscious
                - sulfite-free
                - tree-nut-free
                - vegan
                - vegetarian
                - wheat-free
        - name: cuisineType
          in: query
          description: The type of cuisine of the recipe
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - American
                - Asian
                - British
                - Caribbean
                - Central Europe
                - Chinese
                - Eastern Europe
                - French
                - Indian
                - Italian
                - Japanese
                - Kosher
                - Mediterranean
                - Mexican
                - Middle Eastern
                - Nordic
                - South American
                - South East Asian
        - name: mealType
          in: query
          description: The type of meal a recipe belongs to
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - Breakfast
                - Dinner
                - Lunch
                - Snack
                - Teatime
        - name: dishType
          in: query
          description: The dish type a recipe belongs to
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - Biscuits and cookies
                - Bread
                - Cereals
                - Condiments and sauces
                - Desserts
                - Drinks
                - Main course
                - Pancake
                - Preps
                - Preserve
                - Salad
                - Sandwiches
                - Side dish
                - Soup
                - Starter
                - Sweets
        - name: calories
          in: query
          description: >-
            The format is calories=RANGE where RANGE is in one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            The + symbol needs to be properly encoded. Examples:
            “calories=100-300” will return all recipes with which have between
            100 and 300 kcal per serving.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: time
          in: query
          description: >-
            Time range for the total cooking and prep time for a recipe . The
            format is time=RANGE where RANGE is one of MIN+, MIN-MAX or MAX,
            where MIN and MAX are non-negative integer numbers. The + symbol
            needs to be properly encoded. Examples: “time=1%2B” will return all
            recipes with available total time greater then 1 minute
          schema:
            pattern: (?:[+-]?\d+)|(?:(?:[+-]?\d+)-(?:[+-]?\d+))|(?:(?:[+-]?\d+)[+-])
            type: string
        - name: imageSize
          in: query
          description: Show only recipes, which have images with selected sizes
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - LARGE
                - REGULAR
                - SMALL
                - THUMBNAIL
        - name: glycemicIndex
          in: query
          description: Filter by glycemic index. The format is FLOAT-RANGE
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: inflammatoryIndex
          in: query
          description: Filter by diet inflammatory index. The format is FLOAT-RANGE
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: excluded
          in: query
          description: >-
            Excluding recipes with certain ingredients. The format is
            excluded=FOOD where FOOD is replaced by the name of the specific
            food you don’t want to be present in the recipe results. More than
            one food can be excluded at the same time. Example:
            excluded=vinegar&excluded=pretzel will exclude any recipes which
            contain vinegar or pretzels in their ingredient list
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
        - name: random
          in: query
          description: >-
            Select whether you want this query to respond with a random
            selection of 20 recipes based on the criteria filled. If there were
            only 20 or less possible results, this will return those results in
            random order.
          schema:
            type: boolean
        - name: nutrients[CA]
          in: query
          description: >-
            Calcium, Ca. Unit: mg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> For example: nutrients[CA]=50+ means minimum 50mg calcium,
            where ‘50+’ has to be properly encoded as ‘50%2B’ nutrients[FAT]=30
            means maximum 30g fat and nutrients[FE]=5-10 means iron between 5mg
            and 10mg inclusive
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[CHOCDF]
          in: query
          description: >-
            Carbohydrate, by difference. Unit: g. Input the range which is one
            of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating
            point numbers. <br> <br> See calcium for an example for how to fill
            in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[CHOCDF.net]
          in: query
          description: >-
            Carbohydrates (net). Unit: g. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[CHOLE]
          in: query
          description: >-
            Cholesterol. Unit: mg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br>See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[ENERC_KCAL]
          in: query
          description: >-
            Energy. Unit: kcal. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FAMS]
          in: query
          description: >-
            Fatty acids, total monounsaturated. Unit: g. Input the range which
            is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative
            floating point numbers. <br> <br> See calcium for an example for how
            to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FAPU]
          in: query
          description: >-
            Fatty acids, total polyunsaturated. Unit: g. Input the range which
            is one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative
            floating point numbers. <br> <br> See calcium for an example for how
            to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FASAT]
          in: query
          description: >-
            Fatty acids, total saturated. Unit: g. Input the range which is one
            of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating
            point numbers. <br> <br> See calcium for an example for how to fill
            in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FAT]
          in: query
          description: >-
            Total lipid (fat). Unit: g. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FATRN]
          in: query
          description: >-
            Fatty acids, total trans. Unit: g. Input the range which is one of
            MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating
            point numbers. <br> <br> See calcium for an example for how to fill
            in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FE]
          in: query
          description: >-
            Iron, Fe. Unit: mg. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FIBTG]
          in: query
          description: >-
            Fiber, total dietary. Unit: g. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FOLAC]
          in: query
          description: >-
            Folic acid. Unit: µg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FOLDFE]
          in: query
          description: >-
            Folate, DFE. Unit: µg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[FOLFD]
          in: query
          description: >-
            Folate (food). Unit: µg. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[K]
          in: query
          description: >-
            Potassium, K. Unit: mg. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[MG]
          in: query
          description: >-
            Magnesium. Unit: mg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[NA]
          in: query
          description: >-
            Sodium, Na. Unit: mg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[NIA]
          in: query
          description: >-
            Niacin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[P]
          in: query
          description: >-
            Phosphorus, P. Unit: mg. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[PROCNT]
          in: query
          description: >-
            Protein. Unit: g. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[RIBF]
          in: query
          description: >-
            Riboflavin. Unit: mg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[SUGAR]
          in: query
          description: >-
            Sugars, total. Unit: g. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[SUGAR.added]
          in: query
          description: >-
            Sugars, added. Unit: g. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[Sugar.alcohol]
          in: query
          description: >-
            Sugar alcohols. Unit: g. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[THIA]
          in: query
          description: >-
            Thiamin. Unit: mg. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[TOCPHA]
          in: query
          description: >-
            Vitamin E (alpha-tocopherol). Unit: mg. Input the range which is one
            of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating
            point numbers. <br> <br> See calcium for an example for how to fill
            in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[VITA_RAE]
          in: query
          description: >-
            Vitamin A, RAE. Unit: µg. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[VITB12]
          in: query
          description: >-
            Vitamin B12. Unit: µg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[VITB6A]
          in: query
          description: >-
            Vitamin B6. Unit: mg. Input the range which is one of MIN+, MIN-MAX
            or MAX, where MIN and MAX are non-negative floating point numbers.
            <br> <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[VITC]
          in: query
          description: >-
            Vitamin C, total ascorbic acid. Unit: mg. Input the range which is
            one of MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative
            floating point numbers. <br> <br> See calcium for an example for how
            to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[VITD]
          in: query
          description: >-
            Vitamin D (D2 + D3). Unit: µg. Input the range which is one of MIN+,
            MIN-MAX or MAX, where MIN and MAX are non-negative floating point
            numbers. <br> <br> See calcium for an example for how to fill in the
            range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[VITK1]
          in: query
          description: >-
            Vitamin K (phylloquinone). Unit: µg. Input the range which is one of
            MIN+, MIN-MAX or MAX, where MIN and MAX are non-negative floating
            point numbers. <br> <br> See calcium for an example for how to fill
            in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[WATER]
          in: query
          description: >-
            Water. Unit: g. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: nutrients[ZN]
          in: query
          description: >-
            Zinc, Zn. Unit: mg. Input the range which is one of MIN+, MIN-MAX or
            MAX, where MIN and MAX are non-negative floating point numbers. <br>
            <br> See calcium for an example for how to fill in the range.
          schema:
            pattern: >-
              (?:[+-]?\d+(?:\.\d*)?)|(?:(?:[+-]?\d+(?:\.\d*)?)-(?:[+-]?\d+(?:\.\d*)?))|(?:(?:[+-]?\d+(?:\.\d*)?)[+-])
            type: string
        - name: field
          in: query
          description: Recipe fields to be included in the response.
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - uri
                - label
                - image
                - images
                - source
                - url
                - shareAs
                - yield
                - dietLabels
                - healthLabels
                - cautions
                - ingredientLines
                - ingredients
                - calories
                - glycemicIndex
                - inflammatoryIndex
                - totalCO2Emissions
                - co2EmissionsClass
                - totalWeight
                - totalTime
                - cuisineType
                - mealType
                - dishType
                - totalNutrients
                - totalDaily
                - digest
                - tags
                - externalId
        - name: co2EmissionsClass
          in: query
          description: Filter recipes by their CO2 footprint.
          schema:
            type: string
            enum:
              - A+
              - A
              - B
              - C
              - D
              - E
              - F
              - G
        - name: tag
          in: query
          description: Show only recipes containing the specified tags.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: sysTag
          in: query
          description: >-
            (Beta) Show only recipes containing the specified system tags. This
            field is subject to account subscription restrictions.
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - live
        - name: Accept-Language
          in: header
          description: Search recipes in the specified language.
          schema:
            type: string
            default: en
      responses:
        '200':
          description: Recipe info
          headers:
            Content-Language:
              description: The localization language.
              schema:
                type: string
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RecipeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  /api/recipes/v2/by-uri:
    get:
      tags:
        - recipe search
      summary: Lookup Recipe(s) using their URI(s)
      description: >-
        Search for recipes by their URI. Note, that the API response doesn't
        directly indicate if there are missing recipes. Instead, you need to
        compare he URIs to see if any are missing.
      parameters:
        - name: type
          in: query
          description: Type of recipes to search for.
          required: true
          schema:
            type: string
            enum:
              - public
              - user
              - any
        - name: beta
          in: query
          description: Allow beta features in the request and response
          schema:
            type: boolean
        - name: uri
          in: query
          description: Recipe URIs
          style: form
          explode: true
          schema:
            maxItems: 20
            minItems: 1
            type: array
            items:
              type: string
        - name: app_id
          in: query
          description: >-
            The application ID, obtained from the account dashboard,
            https://developer.edamam.com/admin/applications.
          required: true
          schema:
            type: string
            x-data-threescale-name: app_ids
          x-data-threescale-name: app_ids
        - name: app_key
          in: query
          description: >-
            The application key, obtained from the account dashboard,
            https://developer.edamam.com/admin/applications.
          required: true
          schema:
            type: string
            x-data-threescale-name: app_keys
          x-data-threescale-name: app_keys
        - name: Edamam-Account-User
          in: header
          description: >-
            ID of the account user. Should be used *only* if the account is
            configured for active user tracking.
          schema:
            type: string
        - name: field
          in: query
          description: Recipe fields to be included in the response.
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - uri
                - label
                - image
                - images
                - source
                - url
                - shareAs
                - yield
                - dietLabels
                - healthLabels
                - cautions
                - ingredientLines
                - ingredients
                - calories
                - glycemicIndex
                - inflammatoryIndex
                - totalCO2Emissions
                - co2EmissionsClass
                - totalWeight
                - totalTime
                - cuisineType
                - mealType
                - dishType
                - totalNutrients
                - totalDaily
                - digest
                - tags
                - externalId
        - name: Accept-Language
          in: header
          description: Search recipes in the specified language.
          schema:
            type: string
            default: en
      responses:
        '200':
          description: A list of recipes
          headers:
            Content-Language:
              description: The localization language.
              schema:
                type: string
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RecipeResponse'
        '400':
          description: A list of errors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: A list of errors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
  /api/recipes/v2/{id}:
    get:
      tags:
        - recipe search
      summary: Lookup a Specific Recipe by ID
      description: >-
        Returns the nutritional information for given recipe. These requests are
        constructed automatically and can be found in
        <tt>hits[]._links.self.href</tt>
      parameters:
        - name: id
          in: path
          description: The recipe ID
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: Type of recipes to search for.
          required: true
          schema:
            type: string
            enum:
              - public
              - user
        - name: beta
          in: query
          description: Allow beta features in response.
          schema:
            type: boolean
        - name: app_id
          in: query
          description: >-
            The application ID, obtained from the account dashboard,
            https://developer.edamam.com/admin/applications.
          required: true
          schema:
            type: string
            x-data-threescale-name: app_ids
          x-data-threescale-name: app_ids
        - name: app_key
          in: query
          description: >-
            The application key, obtained from the account dashboard,
            https://developer.edamam.com/admin/applications.
          required: true
          schema:
            type: string
            x-data-threescale-name: app_keys
          x-data-threescale-name: app_keys
        - name: Edamam-Account-User
          in: header
          description: >-
            ID of the account user. Should be used *only* if the account is
            configured for active user tracking.
          schema:
            type: string
        - name: field
          in: query
          description: Recipe fields to be included in the response.
          style: form
          explode: true
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - uri
                - label
                - image
                - images
                - source
                - url
                - shareAs
                - yield
                - dietLabels
                - healthLabels
                - cautions
                - ingredientLines
                - ingredients
                - calories
                - glycemicIndex
                - inflammatoryIndex
                - totalCO2Emissions
                - co2EmissionsClass
                - totalWeight
                - totalTime
                - cuisineType
                - mealType
                - dishType
                - totalNutrients
                - totalDaily
                - digest
                - tags
                - externalId
        - name: Accept-Language
          in: header
          description: Search recipes in the specified language.
          schema:
            type: string
            default: en
      responses:
        '200':
          description: Recipe info
          headers:
            Content-Language:
              description: The localization language.
              schema:
                type: string
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Hit'
        '400':
          description: A list of errors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '403':
          description: A list of errors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
        '404':
          description: A list of errors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Errors'
components:
  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email address of the user.
        username:
          type: string
          description: The username of the user.
        password:
          type: string
          format: password
          description: The password for the new account.
        gender:
          type: string
          description: The gender of the user.  
      example:
        email: "johndoe@example.com"
        username: "John Doe"
        password: "asd123"
        gender: "Hombre"
    UserRegistrationResponse:
      type: object
      properties:
        message:
          type: string
          description: A success message.
        user:
          type: string
          description: The ID of the registered user.    
    UserLogin:
      type: object
      properties:
        email:
          type: string
          description: The username of the user.
        password:
          type: string
          format: password
          description: The password of the user.
      example:
        email: "johndoe@example.com"
        password: "asd123"    
    UserLoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token for the logged-in user.
        refreshToken:
          type: string
          description: Refresh token for the logged-in user.
    User:
      type: object
      properties:
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        password:
          type: string
          description: The password of the user.
        role:
          type: string
          description: The role of the user.
          default: Basic
        creationAccountDate:
          type: string
          format: date-time
          description: The date when the account was created.
        numberOfPosts:
          type: integer
          description: The number of posts by the user.
          default: 0
        numberOfComments:
          type: integer
          description: The number of comments by the user.
          default: 0
        favList:
          type: array
          description: The list of favorite items by the user.
          items:
            type: object
            properties:
              recipeId:
                type: string
                description: The ID of the favorite item.
              addedDate:
                type: string
                format: date-time
                description: The date when the item was added to favorites.
        gender:
          type: string        
      example:
        username: "johndoe"
        email: "johndoe@example.com"
        password: "********"
        role: "Basic"
        creationAccountDate: "2024-05-03T12:00:00Z"
        numberOfPosts: 0
        numberOfComments: 0
        favList:
          - recipeId: "123456789"
            addedDate: "2024-05-03T12:00:00Z"
        gender: "Hombre"    
    Category:
      type: "object"
      properties:
        categoryId:
          type: "string"
        categoryTitle:
          type: "string"
        categorySubtitle:
          type: "string"
    CategoryResponse:
      type: "object"
      properties:
        message:
          type: "string"
        category:
          $ref: "#/components/schemas/Category"
    NewCategory:
      type: "object"
      properties:
        categoryTitle:
          type: "string"
        categorySubtitle:
          type: "string"
    PostRequest:
      type: object
      required:
        - categoryId
        - authorId
        - postTitle
        - content
      properties:
        categoryId:
          type: number
          description: Category ID of the post
        authorId:
          type: string
          description: Author ID of the post
        postTitle:
          type: string
          description: Title of the post
        content:
          type: string
          description: Content of the post
    Post:
      type: object
      properties:
        postId:
          type: number
          description: ID of the post
        categoryId:
          type: number
          description: Category ID of the post
        authorId:
          type: string
          description: Author ID of the post
        postTitle:
          type: string
          description: Title of the post
        content:
          type: string
          description: Content of the post
        timePublication:
          type: string
          format: date-time
          description: Time of publication of the post
        numberOfComments:
          type: number
          description: Number of comments on the post
    Comment: 
      type: object
      properties:
        commentId:
          type: number
          description: ID of the comment
        postId:
          type: string
          description: Post ID of the comment
        authorId:
          type: string
          description: Author ID of the comment
        content:
          type: string
          description: Content of the post
        timePublication:
          type: string
          format: date-time
          description: Time of publication of the comment
    RecipeResponse:
      type: object
      properties:
        from:
          type: integer
        to:
          type: integer
        count:
          type: integer
        _links:
          $ref: '#/components/schemas/Links'
        hits:
          type: array
          items:
            $ref: '#/components/schemas/Hit'
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        params:
          type: array
          items:
            type: string
    Links:
      type: object
      properties:
        self:
          $ref: '#/components/schemas/Link'
        next:
          $ref: '#/components/schemas/Link'
    Link:
      type: object
      properties:
        href:
          type: string
        title:
          type: string
    Hit:
      type: object
      properties:
        recipe:
          $ref: '#/components/schemas/Recipe'
        _links:
          $ref: '#/components/schemas/Links'
    Recipe:
      type: object
      properties:
        uri:
          type: string
        label:
          type: string
        image:
          type: string
        images:
          type: object
          properties:
            THUMBNAIL:
              $ref: '#/components/schemas/ImageInfo'
            SMALL:
              $ref: '#/components/schemas/ImageInfo'
            REGULAR:
              $ref: '#/components/schemas/ImageInfo'
            LARGE:
              $ref: '#/components/schemas/ImageInfo'
        source:
          type: string
        url:
          type: string
        shareAs:
          type: string
        yield:
          type: number
        dietLabels:
          type: array
          items:
            type: string
        healthLabels:
          type: array
          items:
            type: string
        cautions:
          type: array
          items:
            type: string
        ingredientLines:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        calories:
          type: number
        glycemicIndex:
          type: number
        inflammatoryIndex:
          type: number
        totalCO2Emissions:
          type: number
        co2EmissionsClass:
          type: string
          enum:
            - A+
            - A
            - B
            - C
            - D
            - E
            - F
            - G
        totalWeight:
          type: number
        cuisineType:
          type: array
          items:
            type: string
        mealType:
          type: array
          items:
            type: string
        dishType:
          type: array
          items:
            type: string
        instructions:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        externalId:
          type: string
        totalNutrients:
          $ref: '#/components/schemas/NutrientsInfo'
        totalDaily:
          $ref: '#/components/schemas/NutrientsInfo'
        digest:
          $ref: '#/components/schemas/Digest'
    Ingredient:
      type: object
      properties:
        text:
          type: string
        quantity:
          type: number
        measure:
          type: string
        food:
          type: string
        weight:
          type: number
        foodId:
          type: string
    NutrientsInfo:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NutrientInfo'
    NutrientInfo:
      type: object
      properties:
        label:
          type: string
        quantity:
          type: number
        unit:
          type: string
    Digest:
      type: array
      items:
        $ref: '#/components/schemas/DigestEntry'
    DigestEntry:
      type: object
      properties:
        label:
          type: string
        tag:
          type: string
        schemaOrgTag:
          type: string
        total:
          type: number
        hasRDI:
          type: boolean
        daily:
          type: number
        unit:
          type: string
        sub:
          $ref: '#/components/schemas/Digest'
    ImageInfo:
      type: object
      properties:
        url:
          type: string
        width:
          type: integer
        height:
          type: integer     
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message.
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message.
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message.
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message.            
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message.     
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - JWTAuth: []